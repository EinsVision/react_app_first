[{"D:\\React_project\\Node_react_app\\src\\index.js":"1","D:\\React_project\\Node_react_app\\src\\reportWebVitals.js":"2","D:\\React_project\\Node_react_app\\src\\App.js":"3","D:\\React_project\\Node_react_app\\src\\Avocado.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":5434,"mtime":1612067881674,"results":"8","hashOfConfig":"6"},{"size":27234,"mtime":1612067715845,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"3emq4n",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React_project\\Node_react_app\\src\\index.js",[],["20","21"],"D:\\React_project\\Node_react_app\\src\\reportWebVitals.js",[],"D:\\React_project\\Node_react_app\\src\\App.js",["22"],"import React, {useRef} from 'react';\nimport './App.css';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as facemesh from \"@tensorflow-models/facemesh\";\nimport Webcam from \"react-webcam\";\nimport { drawMesh } from './Avocado';\n\nfunction App() {\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n\n    // Load facemesh\n    const runFacemesh = async() =>{\n        const net = await facemesh.load({\n            inputResolution:{width: 640, height: 480}, scale: 0.8\n        });\n        setInterval(() => {\n            detect(net)\n        }, 100)\n    };\n    // detect function\n    const detect = async(net) =>{\n        if (\n            typeof webcamRef.current !== \"undefined\" && \n            webcamRef.current !== null && \n            webcamRef.current.video.readyState === 4) {\n            \n                const video = webcamRef.current.video;\n                const videoWidth = webcamRef.current.video.videoWidth;\n                const videoHeight = webcamRef.current.video.videoHeight;\n\n                webcamRef.current.video.width = videoWidth;\n                webcamRef.current.video.height = videoHeight;\n\n                canvasRef.current.width = videoWidth;\n                canvasRef.current.height = videoHeight;\n\n                const face = await net.estimateFaces(video);\n                console.log(face);\n\n                const ctx = canvasRef.current.getContext(\"2d\");\n                drawMesh(face, ctx);\n        }\n    }\n\n    runFacemesh();\n    return (\n        <div className=\"App-header\">\n            <Webcam ref={webcamRef} style={\n                {\n                    position: \"absolute\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    left:0,\n                    right: 0,\n                    textAlign: \"center\",\n                    zIndex:9,\n                    width: 640,\n                    height: 480\n                }\n            }/>\n            <canvas ref={canvasRef} style={\n                {\n                    position: \"absolute\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    left:0,\n                    right: 0,\n                    textAlign: \"center\",\n                    zIndex:9,\n                    width: 640,\n                    height: 480\n                }\n            }/>\n        </div>\n    );\n}\n\nexport default App;\n\n\n// const data = [\n//   {\n//     id: 1,\n//     title: 'Node',\n//     value: 0\n//   },\n//   {\n//     id: 2,\n//     title: 'React',\n//     value: 1\n//   }\n// ];\n\n// function App() {\n//   return (\n//     <div className=\"App-header\">\n//       Hello React!\n//       {\n//         data.map(ele =>(\n//           <>\n//             <p key={ele.id}>{ele.title}, {ele.value}</p>\n//           </>\n//         ))\n//       }\n//     </div>\n//   );\n// }\n\n//React 장점\n// 1. Virtual DOM\n// page가 전체가 reload 되는 것은 SPA (single page application)가 아니다.\n// DOM가 SPA model이 아닌 경우에 page 전체가 reloading 되어 DOM 객체가 전부다 rendering 된다.\n// Rendering : 실제로 web page에 그려지는 것을 뜻한다. \n// 일부 데이터를 새로 나타내기 위해 Page 전체를 reloading 하는 일이 발생한다. \n// Virtual DOM을 사용하면 필요한 부분만 update 되어서 rendering 된다. 사용자가 기다릴 필요가 없다. 즉 선택적으로 update되는 것이다.\n\n// 2. Only View, No MVC\n// 경량화 한 것이다.\n\n// 3. Reusable Components\n// 원하는 Data를 사용할 수 있도록 Library 형태로 React는 제공된다.\n// size를 줄인 library이다. 재사용 가능한 component를 제공한다.\n\n// 4. Hot reloading\n// page를 새로고침할 필요없이 코드를 수정하면 web page가 수정이 된다.\n\n// 5. Server Sice Rendering (feat. SEO)\n// 검색엔진 최적화 문제를 해결했다. Node.JS에서 page rendering하는 하는 것을 말한다.\n\n//JSX와 Fragment\n// React는 모든 것을 view로 본다. JSX : javascript 확장해서 마치 XML 문법 처럼 만든 것을 말한다.\n// Fragment: <> </> \n\n// const Head = props => <h1>{props.title}</h1>\n\n// function App(){\n//   return(\n//     <>\n//       <h1 className='App-link'>Hello</h1>\n//       <Head title='This is a title'/>\n//       <Head title='React is useful.'/>\n//       <Avocado />\n//     </>ㅡㅡㅡㅡ\n//   );ㅡㅡㅡㅡ\n// }ㅡㅡㅡㅡ\n\n\n// import Avocado from './Avocado';\n\n// const Loading = () => <div>Loading...</div>;\n\n// class App extends React.Component{\n//   constructor(props){\n//     super(props)\n//     this.state = {\n//       loading: true\n//     }\n//   }\n//   comment(){\n//     const con = 1;\n//     const result = (con > 0) ? true : false; \n\n//     console.log(result);\n//   }\n\n//   render(){\n//     const {loading} = this.state;\n//     return(\n//       <>\n//         {\n//           loading ? <Loading/> : <div>This is a webpage.</div>\n//         }\n//       </>\n//     );\n//   }\n// }\n\n//  component life cycle\n// class App extends React.Component{\n//   constructor(props){\n//     super(props)\n\n//   }\n\n//   componentWillMount(){\n//     console.log('componentWillMount');\n//   }\n\n//   render(){\n//     console.log('render');\n//     return(\n//       <>\n//         {\n\n//         }\n//       </>\n//     )\n//   }\n\n//   componentDidMount(){\n//     console.log('componentDidMount');\n//   }\n\n//   componentWillUnmount(){\n//     console.log('componentWillUnmount');\n//   }\n\n  \n// }","D:\\React_project\\Node_react_app\\src\\Avocado.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":3,"column":13,"nodeType":"29","messageId":"30","endLine":3,"endColumn":15},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'tf' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]